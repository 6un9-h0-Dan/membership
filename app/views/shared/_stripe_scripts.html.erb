<script>
  function intializeStripeConfiguration(){
    // Create a Stripe client.
    const stripe = Stripe('<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>');

    // Create an instance of Elements.
    const elements = stripe.elements();

    // Custom styling can be passed to options when creating an Element.
    const style = {
      base: {
        color: '#32325d',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };

    // Create an instance of the card Element.
    const card = elements.create('card', {style: style});

    // Add an instance of the card Element into the `card-element` <div>.
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element.
    card.addEventListener('change', function(event) {
      const displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    });

    const amountField = document.getElementById('amount-field')
    const submitPaymentButton = document.getElementById('submit-payment')

    // disable submit button by default
    if (amountField) {
      submitPaymentButton.setAttribute("disabled", "disabled")

      amountField.addEventListener('input', function(event) {
        if (amountField.value.length === 0) {
          submitPaymentButton.setAttribute("disabled", "disabled")
        } else {
          submitPaymentButton.removeAttribute("disabled", "disabled");
        };
      });
    }

    // Handle form submission.
    const form = document.getElementById('payment-form');
    form.addEventListener('submit', function(event) {
      event.preventDefault();

      stripe.createToken(card).then(function(result) {
        if (result.error) {
          // Inform the user if there was an error.
          const errorElement = document.getElementById('card-errors');
          errorElement.textContent = result.error.message;
        } else {
          // Send the token to your server.
          stripeTokenHandler(result.token);
        }
      });
    });

    // Submit the form with the token ID.
    function stripeTokenHandler(token) {
      // Insert the token ID into the form so it gets submitted to the server
      const form = document.getElementById('payment-form');
      const stripeHiddenInput = document.createElement('input');
      stripeHiddenInput.setAttribute('type', 'hidden');
      stripeHiddenInput.setAttribute('name', 'stripeToken');
      stripeHiddenInput.setAttribute('value', token.id);
      form.appendChild(stripeHiddenInput);

      const planHiddenInput = document.createElement('input');
      planHiddenInput.setAttribute('type', 'hidden');
      planHiddenInput.setAttribute('name', 'subscription[plan_attributes][id]');
      planHiddenInput.setAttribute('value', '<%= @subscription&.plan&.id %>');
      form.appendChild(planHiddenInput);

      // Submit the form
      form.submit();
    }
  }

  intializeStripeConfiguration()
</script>
